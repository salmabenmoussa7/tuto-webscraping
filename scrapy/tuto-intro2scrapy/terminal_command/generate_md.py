# Creating a Markdown file with the provided content to be downloadable.
md_file_path = './introduction_a_scrapy.md'

with open(md_file_path, 'w', encoding='utf-8') as md_file:
    md_file.write(
        "# Introduction à Scrapy\n\n"
        "## Installation de Scrapy\n"
        "1. **Créer un environnement virtuel** : \n"
        "   ```\n"
        "   venv\n"
        "   ```\n"
        "2. **Installer Scrapy** : \n"
        "   ```\n"
        "   pip install scrapy\n"
        "   ```\n"
        "3. **Tester l'installation** : \n"
        "   ```\n"
        "   scrapy\n"
        "   ```\n"
        "   Si tout fonctionne, tu devrais voir \"No active project\".\n\n"
        "## Créer un projet Scrapy\n"
        "1. Créer un projet avec la commande : \n"
        "   ```\n"
        "   scrapy startproject bookscraper\n"
        "   ```\n"
        "2. Cela génère plusieurs dossiers :\n"
        "   - **spiders** (vide pour l'instant)\n"
        "   - **items**, **middlewares**, **pipelines** (optionnels)\n"
        "   - **settings** (important pour la configuration)\n\n"
        "Nous allons les utiliser pour scraper plusieurs pages à la fois.\n\n"
        "## Créer un spider\n"
        "1. Utiliser la commande :\n"
        "   ```\n"
        "   scrapy genspider quotespider http://quotes.toscrape.com/\n"
        "   ```\n"
        "   Cela génère un spider nommé `quotespider` pour scraper ce site web.\n\n"
        "## Utiliser iPython avec Scrapy\n"
        "1. Installer iPython : \n"
        "   ```\n"
        "   pip install ipython\n"
        "   ```\n"
        "2. Ajouter dans `scrapy.cfg` :\n"
        "   ```\n"
        "   shell = ipython\n"
        "   ```\n"
        "3. Lancer le shell dans le terminal : \n"
        "   ```\n"
        "   scrapy shell\n"
        "   ```\n\n"
        "## Interagir avec une page web dans Scrapy Shell\n"
        "1. **Récupérer le HTML d'une page** :\n"
        "   ```\n"
        "   fetch('http://quotes.toscrape.com/')\n"
        "   ```\n"
        "2. **Extraire les citations** :\n"
        "   ```\n"
        "   response.css('div.quote')\n"
        "   ```\n"
        "3. **Obtenir la première citation** :\n"
        "   ```\n"
        "   response.css('div.quote').get()\n"
        "   ```\n\n"
        "## Travailler avec les sélecteurs CSS et XPath\n"
        "1. Mettre toutes les citations dans une variable : \n"
        "   ```\n"
        "   quotes = response.css('div.quote')\n"
        "   ```\n"
        "2. **Longueur des citations** :\n"
        "   ```\n"
        "   len(quotes)\n"
        "   ```\n"
        "3. **Première citation** :\n"
        "   ```\n"
        "   quote = quotes[0]\n"
        "   ```\n"
        "4. Extraire des éléments spécifiques avec XPath :\n"
        "   - **Texte de la première citation** : \n"
        "     ```\n"
        "     quote.xpath('/html/body/div/div[2]/div[1]/div[1]/span[1]/text()').get()\n"
        "     ```\n"
        "   - **Auteur de la première citation** : \n"
        "     ```\n"
        "     quote.xpath('/html/body/div/div[2]/div[1]/div[1]/span[2]/small/text()').get()\n"
        "     ```\n"
        "   - **Premier tag** : \n"
        "     ```\n"
        "     quote.xpath('/html/body/div/div[2]/div[1]/div[1]/div/a[1]/text()').get()\n"
        "     ```\n"
        "   - **Lien vers l'auteur** : \n"
        "     ```\n"
        "     quote.xpath('/html/body/div/div[2]/div[1]/div[1]/span[2]/a').attrib[\"href\"]\n"
        "     ```\n\n"
        "## Pagination\n"
        "1. Pour obtenir le lien vers la page suivante :\n"
        "   ```\n"
        "   response.css('li.next a ::attr(href)').get()\n"
        "   ```"
    )

md_file_path